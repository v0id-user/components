{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "filter",
  "type": "registry:component",
  "title": "Filter component",
  "description": "A simple and flexable modern filter component",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "path": "registry/default/filter/filter.tsx",
      "content": "'use client'\n\nimport { SlidersHorizontal, X, ChevronDown } from \"lucide-react\";\nimport { useEffect } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport { useFilter } from \"@/registry/default/filter/hooks/useFilter\";\nimport { FilterProps, FilterCriteria, FilterType, FilterCondition, FilterOption } from \"@/registry/default/filter/lib/types\";\nimport { filterBlockStyles } from \"@/registry/default/filter/lib/styles\";\n\ninterface FilterItemProps {\n    icon: any;\n    label: string;\n    onRemove: () => void;\n}\n\nconst FilterItem: React.FC<FilterItemProps> = ({ icon: Icon, label, onRemove }) => (\n    <div className={filterBlockStyles.filterItem}>\n        <Icon className=\"w-3 h-3\" />\n        <span>{label}</span>\n        <button onClick={onRemove} className=\"text-gray-400 hover:text-red-500 mr-1\">\n            <X className=\"w-3 h-3\" />\n        </button>\n    </div>\n);\n\ninterface ConditionSelectorProps {\n    condition: FilterCondition;\n    onRemove: () => void;\n}\n\nconst ConditionSelector: React.FC<ConditionSelectorProps> = ({ condition, onRemove }) => (\n    <div className={filterBlockStyles.filterItem}>\n        <span>{condition.label}</span>\n        <button onClick={onRemove} className=\"text-gray-400 hover:text-red-500 mr-1\">\n            <X className=\"w-3 h-3\" />\n        </button>\n    </div>\n);\n\ninterface DropdownPortalProps {\n    children: React.ReactNode;\n    targetRef: React.RefObject<HTMLDivElement | null>;\n    isOpen: boolean;\n    onClose: () => void;\n}\n\nconst DropdownPortal: React.FC<DropdownPortalProps> = ({ children, targetRef, isOpen, onClose }) => {\n    useEffect(() => {\n        if (!isOpen) return;\n\n        const handleClickOutside = (event: MouseEvent) => {\n            const target = event.target as HTMLElement;\n            if (!targetRef.current?.contains(target)) {\n                onClose();\n            }\n        };\n\n        document.addEventListener('click', handleClickOutside);\n        return () => document.removeEventListener('click', handleClickOutside);\n    }, [isOpen, onClose]);\n\n    if (!isOpen || !targetRef.current) return null;\n\n    const rect = targetRef.current.getBoundingClientRect();\n    const portalContent = (\n        <div\n            className={filterBlockStyles.dropdownContainer}\n            style={{\n                top: `${rect.bottom + 4}px`,\n                left: `${rect.left}px`,\n                width: `${rect.width}px`,\n            }}\n            onClick={(e) => e.stopPropagation()}\n        >\n            {children}\n        </div>\n    );\n\n    return createPortal(portalContent, document.body);\n};\n\ninterface TypeSelectorDropdownProps {\n    options: FilterOption[];\n    onSelect: (type: FilterType) => void;\n    targetRef: React.RefObject<HTMLDivElement | null>;\n    isOpen: boolean;\n    onClose: () => void;\n}\n\nconst TypeSelectorDropdown: React.FC<TypeSelectorDropdownProps> = ({ options, onSelect, targetRef, isOpen, onClose }) => (\n    <DropdownPortal targetRef={targetRef} isOpen={isOpen} onClose={onClose}>\n        <div className=\"flex flex-col gap-1\">\n            {options.map((option) => (\n                <button\n                    key={option.type}\n                    onClick={() => onSelect(option.type)}\n                    className=\"w-full cursor-pointer p-1.5 text-xs rounded-md hover:bg-gray-50 text-right flex items-center justify-start gap-1.5\"\n                >\n                    <option.icon className=\"w-3.5 h-3.5\" />\n                    <span>{option.label}</span>\n                </button>\n            ))}\n        </div>\n    </DropdownPortal>\n);\n\ninterface ConditionDropdownProps {\n    conditions: FilterCondition[];\n    onSelect: (condition: FilterCondition) => void;\n    targetRef: React.RefObject<HTMLDivElement | null>;\n    isOpen: boolean;\n    onClose: () => void;\n}\n\nconst ConditionDropdown: React.FC<ConditionDropdownProps> = ({ conditions, onSelect, targetRef, isOpen, onClose }) => (\n    <DropdownPortal targetRef={targetRef} isOpen={isOpen} onClose={onClose}>\n        <div className=\"flex flex-col gap-1\">\n            {conditions.map((condition) => (\n                <button\n                    key={condition.id}\n                    onClick={() => onSelect(condition)}\n                    className=\"w-full cursor-pointer p-1.5 text-xs rounded-md hover:bg-gray-50 text-right\"\n                >\n                    {condition.label}\n                </button>\n            ))}\n        </div>\n    </DropdownPortal>\n);\n\ninterface ValueSelectorProps {\n    onClick: (e: React.MouseEvent) => void;\n    showValues: boolean;\n    selectedType: FilterType;\n    options: FilterOption[];\n    onSelect: (e: React.MouseEvent, value: string, label: string) => void;\n    targetRef: React.RefObject<HTMLDivElement | null>;\n    onClose: () => void;\n}\n\nconst ValueSelector: React.FC<ValueSelectorProps> = ({ onClick, showValues, selectedType, options, onSelect, targetRef, onClose }) => (\n    <div \n        className={`${filterBlockStyles.filterItem} cursor-pointer text-gray-500 relative value-selector`}\n        onClick={onClick}\n        ref={targetRef}\n    >\n        <span>اختر القيمة</span>\n        <ChevronDown className={`w-3 h-3 mr-1 transition-transform duration-200 ${showValues ? 'transform rotate-180' : ''}`} />\n        \n        <DropdownPortal targetRef={targetRef} isOpen={showValues} onClose={onClose}>\n            {options.find(opt => opt.type === selectedType)?.values.map((value) => (\n                <div\n                    key={value.id}\n                    className={filterBlockStyles.valueDropdown}\n                    onClick={(e) => onSelect(e, value.id, value.label)}\n                >\n                    {value.label}\n                </div>\n            ))}\n        </DropdownPortal>\n    </div>\n);\n\ninterface ActiveFilterProps {\n    filter: FilterCriteria;\n    options: FilterOption[];\n    onRemove: (type: FilterType) => void;\n}\n\nconst ActiveFilter: React.FC<ActiveFilterProps> = ({ filter, options, onRemove }) => {\n    const option = options.find(opt => opt.type === filter.type);\n    const value = option?.values.find(v => v.id === filter.value);\n    const condition = option?.conditions.find(c => c.id === filter.condition);\n    const Icon = option?.icon;\n\n    return (\n        <div className={filterBlockStyles.filterGroup}>\n            <div className={filterBlockStyles.filterItem}>\n                {Icon && <Icon className=\"w-3 h-3\" />}\n                <span>{option?.label}</span>\n            </div>\n            <div className={filterBlockStyles.separator} />\n            <div className={filterBlockStyles.filterItem}>\n                {condition?.label}\n            </div>\n            <div className={filterBlockStyles.separator} />\n            <div className={`${filterBlockStyles.filterItem} group`}>\n                <span>{value?.label}</span>\n                <button\n                    onClick={() => onRemove(filter.type)}\n                    className=\"text-gray-400 hover:text-red-500 opacity-0 group-hover:opacity-100 transition-opacity mr-1\"\n                >\n                    <X className=\"w-3 h-3\" />\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default function Filter({ options, onFilterChange, autoOpenDropdown = false, className = '' }: FilterProps) {\n    const {\n        isOpen,\n        setIsOpen,\n        activeFilters,\n        selectedType,\n        setSelectedType,\n        selectedCondition,\n        setSelectedCondition,\n        showConditions,\n        setShowConditions,\n        showValues,\n        setShowValues,\n        addFilterBtnRef,\n        conditionBtnRef,\n        valueSelectorRef,\n        handleValueClick,\n        handleValueSelect,\n        handleTypeSelect,\n        handleConditionSelect,\n        removeFilter\n    } = useFilter({ autoOpenDropdown });\n\n    useEffect(() => {\n        onFilterChange?.(activeFilters);\n    }, [activeFilters, onFilterChange]);\n\n    const selectedOption = options.find(opt => opt.type === selectedType);\n\n    return (\n        <div className={`relative ${className}`}>\n            <div className={filterBlockStyles.container}>\n                <div \n                    ref={addFilterBtnRef}\n                    onClick={() => setIsOpen(!isOpen)}\n                    className={filterBlockStyles.addFilterBtn}\n                >\n                    <SlidersHorizontal className=\"w-3 h-3\" />\n                    <span>تصفية</span>\n                </div>\n\n                {activeFilters.map((filter, index) => (\n                    <ActiveFilter \n                        key={index} \n                        filter={filter} \n                        options={options}\n                        onRemove={removeFilter} \n                    />\n                ))}\n\n                {selectedType && selectedOption && (\n                    <div className={filterBlockStyles.filterGroup}>\n                        <FilterItem\n                            icon={selectedOption.icon}\n                            label={selectedOption.label}\n                            onRemove={() => {\n                                setSelectedType(null);\n                                setSelectedCondition(null);\n                                setShowConditions(false);\n                            }}\n                        />\n\n                        {!selectedCondition && (\n                            <>\n                                <div className={filterBlockStyles.separator} />\n                                <div\n                                    ref={conditionBtnRef}\n                                    onClick={() => setShowConditions(!showConditions)}\n                                    className={`${filterBlockStyles.filterItem} cursor-pointer text-gray-500`}\n                                >\n                                    <span>اختر الشرط</span>\n                                    <ChevronDown className=\"w-3 h-3 mr-1\" />\n                                </div>\n                            </>\n                        )}\n\n                        {selectedCondition && (\n                            <>\n                                <div className={filterBlockStyles.separator} />\n                                <ConditionSelector\n                                    condition={selectedCondition}\n                                    onRemove={() => {\n                                        setSelectedCondition(null);\n                                        setShowValues(false);\n                                    }}\n                                />\n                                <div className={filterBlockStyles.separator} />\n                                <ValueSelector\n                                    onClick={handleValueClick}\n                                    showValues={showValues}\n                                    selectedType={selectedType}\n                                    options={options}\n                                    onSelect={handleValueSelect}\n                                    targetRef={valueSelectorRef}\n                                    onClose={() => setShowValues(false)}\n                                />\n                            </>\n                        )}\n                    </div>\n                )}\n            </div>\n\n            <TypeSelectorDropdown \n                options={options}\n                onSelect={handleTypeSelect} \n                targetRef={addFilterBtnRef}\n                isOpen={isOpen && !selectedType}\n                onClose={() => setIsOpen(false)}\n            />\n\n            {selectedOption && (\n                <ConditionDropdown \n                    conditions={selectedOption.conditions}\n                    onSelect={handleConditionSelect}\n                    targetRef={conditionBtnRef}\n                    isOpen={showConditions}\n                    onClose={() => setShowConditions(false)}\n                />\n            )}\n        </div>\n    );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/filter/filter-builder.ts",
      "content": "export type FilterType = 'assignee' | 'history' | 'createdBy';\r\nexport type FilterCondition = 'is' | 'isNot';\r\n\r\nexport interface FilterCriteria {\r\n    type: FilterType;\r\n    condition: FilterCondition;\r\n    value: string;\r\n}\r\n\r\nexport class FilterBuilder {\r\n    private filters: FilterCriteria[] = [];\r\n\r\n    addFilter(type: FilterType, condition: FilterCondition, value: string): FilterBuilder {\r\n        this.filters.push({ type, condition, value });\r\n        return this;\r\n    }\r\n\r\n    removeFilter(type: FilterType): FilterBuilder {\r\n        this.filters = this.filters.filter(filter => filter.type !== type);\r\n        return this;\r\n    }\r\n\r\n    clearFilters(): FilterBuilder {\r\n        this.filters = [];\r\n        return this;\r\n    }\r\n\r\n    getFilters(): FilterCriteria[] {\r\n        return [...this.filters];\r\n    }\r\n\r\n    buildQueryString(): string {\r\n        if (this.filters.length === 0) return '';\r\n\r\n        const params = this.filters.map(filter => {\r\n            const conditionParam = filter.condition === 'is' ? '' : 'not_';\r\n            return `${filter.type}=${conditionParam}${encodeURIComponent(filter.value)}`;\r\n        });\r\n\r\n        return `?${params.join('&')}`;\r\n    }\r\n} ",
      "type": "registry:lib"
    },
    {
      "path": "registry/default/filter/hooks/useFilter.ts",
      "content": "import { useState, useRef } from 'react';\r\nimport { FilterType, FilterCondition, FilterCriteria } from '@/registry/default/filter/lib/types';\r\n\r\ninterface UseFilterOptions {\r\n    autoOpenDropdown?: boolean;\r\n}\r\n\r\nexport function useFilter({ autoOpenDropdown = false }: UseFilterOptions = {}) {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [activeFilters, setActiveFilters] = useState<FilterCriteria[]>([]);\r\n    const [selectedType, setSelectedType] = useState<FilterType | null>(null);\r\n    const [selectedCondition, setSelectedCondition] = useState<FilterCondition | null>(null);\r\n    const [showConditions, setShowConditions] = useState(false);\r\n    const [showValues, setShowValues] = useState(false);\r\n\r\n    const addFilterBtnRef = useRef<HTMLDivElement>(null);\r\n    const conditionBtnRef = useRef<HTMLDivElement>(null);\r\n    const valueSelectorRef = useRef<HTMLDivElement>(null);\r\n\r\n    const handleValueClick = (e: React.MouseEvent) => {\r\n        e.stopPropagation();\r\n        setShowValues(!showValues);\r\n    };\r\n\r\n    const handleValueSelect = (e: React.MouseEvent, value: string, label: string) => {\r\n        e.stopPropagation();\r\n        if (selectedType && selectedCondition) {\r\n            const newFilter: FilterCriteria = {\r\n                type: selectedType,\r\n                condition: selectedCondition.id,\r\n                value\r\n            };\r\n            \r\n            setActiveFilters(prev => [...prev, newFilter]);\r\n            \r\n            // Reset all states\r\n            setSelectedType(null);\r\n            setSelectedCondition(null);\r\n            setShowValues(false);\r\n            setIsOpen(false);\r\n            \r\n            // Auto open next filter if enabled\r\n            if (autoOpenDropdown) {\r\n                setTimeout(() => {\r\n                    setIsOpen(true);\r\n                }, 50);\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleTypeSelect = (type: FilterType) => {\r\n        setSelectedType(type);\r\n        setIsOpen(false);\r\n        // Auto open condition dropdown if enabled\r\n        if (autoOpenDropdown) {\r\n            setTimeout(() => {\r\n                setShowConditions(true);\r\n            }, 50);\r\n        }\r\n    };\r\n\r\n    const handleConditionSelect = (condition: FilterCondition) => {\r\n        setSelectedCondition(condition);\r\n        setShowConditions(false);\r\n        // Auto open value dropdown if enabled\r\n        if (autoOpenDropdown) {\r\n            setTimeout(() => {\r\n                setShowValues(true);\r\n            }, 50);\r\n        }\r\n    };\r\n\r\n    const removeFilter = (type: FilterType) => {\r\n        setActiveFilters(prev => prev.filter(f => f.type !== type));\r\n    };\r\n\r\n    return {\r\n        isOpen,\r\n        setIsOpen,\r\n        activeFilters,\r\n        selectedType,\r\n        setSelectedType,\r\n        selectedCondition,\r\n        setSelectedCondition,\r\n        showConditions,\r\n        setShowConditions,\r\n        showValues,\r\n        setShowValues,\r\n        addFilterBtnRef,\r\n        conditionBtnRef,\r\n        valueSelectorRef,\r\n        handleValueClick,\r\n        handleValueSelect,\r\n        handleTypeSelect,\r\n        handleConditionSelect,\r\n        removeFilter\r\n    };\r\n} ",
      "type": "registry:hook"
    },
    {
      "path": "registry/default/filter/lib/types.ts",
      "content": "import { LucideIcon } from \"lucide-react\";\r\n\r\nexport type FilterType = string;\r\n\r\nexport interface FilterCondition {\r\n    id: string;\r\n    label: string;\r\n}\r\n\r\nexport interface FilterOption {\r\n    type: FilterType;\r\n    label: string;\r\n    icon: LucideIcon;\r\n    values: { id: string; label: string }[];\r\n    conditions: FilterCondition[];\r\n}\r\n\r\nexport interface FilterCriteria {\r\n    type: FilterType;\r\n    condition: string;\r\n    value: string;\r\n}\r\n\r\nexport interface FilterProps {\r\n    options: FilterOption[];\r\n    onFilterChange?: (filters: FilterCriteria[]) => void;\r\n    autoOpenDropdown?: boolean;\r\n    className?: string;\r\n} ",
      "type": "registry:lib"
    },
    {
      "path": "registry/default/filter/lib/styles.ts",
      "content": "export const filterBlockStyles = {\r\n    container: \"flex items-center gap-2 flex-wrap\",\r\n    filterGroup: \"flex items-center bg-white border border-gray-300 rounded-lg overflow-hidden\",\r\n    filterItem: \"py-1 px-2 flex items-center gap-1 text-xs overflow-visible\",\r\n    separator: \"w-[1px] h-4 bg-gray-300\",\r\n    addFilterBtn: \"bg-gray-200/10 border-1 border-dashed border-gray-400 rounded-lg py-1 px-2 flex items-center gap-2 text-gray-500 text-xs w-fit cursor-pointer\",\r\n    dropdownBtn: \"bg-gray-200/10 border-1 border-dashed border-gray-400 rounded-lg py-1 px-2 flex items-center gap-1 text-gray-500 text-xs cursor-pointer\",\r\n    valueInput: \"py-1 px-2 text-xs w-24 focus:outline-none\",\r\n    applyBtn: \"bg-blue-500 text-white py-1 px-2 text-xs\",\r\n    valueDropdown: \"py-1.5 px-2 text-xs cursor-pointer hover:bg-gray-50 text-right\",\r\n    dropdownContainer: \"fixed bg-white rounded-lg shadow-lg border border-gray-200 py-1 w-full min-w-[160px] z-[9999]\",\r\n}; ",
      "type": "registry:lib"
    }
  ]
}