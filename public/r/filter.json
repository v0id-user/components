{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "filter",
  "type": "registry:component",
  "title": "Filter component",
  "description": "A simple and flexable modern filter component",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "path": "registry/default/filter/filter.tsx",
      "content": "'use client'\n\nimport React, { useRef, useEffect } from 'react';\nimport { SlidersHorizontal, X, ChevronDown, Plus } from \"lucide-react\";\nimport { createPortal } from \"react-dom\";\nimport { FilterProps, FilterCriteria, FilterType, FilterCondition, FilterOption } from \"@/registry/default/filter/lib/filter-types\";\nimport { useFilter } from \"@/registry/default/filter/hooks/useFilter\";\nimport { filterBlockStyles } from \"@/registry/default/filter/lib/filter-styles\";\n\nconst animationStyles = {\n    dropdownContainer: \"animate-[slideIn_0.2s_ease-out_forwards]\",\n    dropdownItem: \"animate-[fadeIn_0.2s_ease-out_forwards]\"\n};\n\nconst keyframes = `\n@keyframes slideIn {\n    from {\n        transform: translateY(-8px);\n        opacity: 0;\n    }\n    to {\n        transform: translateY(0);\n        opacity: 1;\n    }\n}\n\n@keyframes fadeIn {\n    from {\n        opacity: 0;\n        transform: translateY(-4px);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n`;\n\ninterface FilterItemProps {\n    icon: any;\n    label: string;\n    onRemove: () => void;\n}\n\nconst FilterItem: React.FC<FilterItemProps> = ({ icon: Icon, label, onRemove }) => (\n    <div className={filterBlockStyles.filterItem}>\n        <Icon className=\"w-3 h-3\" />\n        <span>{label}</span>\n        <button onClick={onRemove} className=\"text-gray-400 hover:text-red-500 mr-1\">\n            <X className=\"w-3 h-3\" />\n        </button>\n    </div>\n);\n\ninterface ConditionSelectorProps {\n    condition: FilterCondition;\n    onRemove: () => void;\n}\n\nconst ConditionSelector: React.FC<ConditionSelectorProps> = ({ condition, onRemove }) => (\n    <div className={filterBlockStyles.filterItem}>\n        <span>{condition.label}</span>\n        <button onClick={onRemove} className=\"text-gray-400 hover:text-red-500 mr-1\">\n            <X className=\"w-3 h-3\" />\n        </button>\n    </div>\n);\n\ninterface DropdownPortalProps {\n    children: React.ReactNode;\n    targetRef: React.RefObject<HTMLDivElement | HTMLButtonElement | null>;\n    isOpen: boolean;\n    onClose: () => void;\n}\n\nconst DropdownPortal: React.FC<DropdownPortalProps> = ({ children, targetRef, isOpen, onClose }) => {\n    useEffect(() => {\n        if (!isOpen) return;\n\n        const handleClickOutside = (event: MouseEvent) => {\n            const target = event.target as HTMLElement;\n            if (!targetRef.current?.contains(target)) {\n                onClose();\n            }\n        };\n\n        document.addEventListener('click', handleClickOutside);\n        return () => document.removeEventListener('click', handleClickOutside);\n    }, [isOpen, onClose]);\n\n    if (!isOpen || !targetRef.current) return null;\n\n    const rect = targetRef.current.getBoundingClientRect();\n    const portalContent = (\n        <>\n            <style>{keyframes}</style>\n            <div\n                className={`${filterBlockStyles.dropdownContainer} ${animationStyles.dropdownContainer}`}\n                style={{\n                    top: `${rect.bottom + 4}px`,\n                    left: `${rect.left}px`,\n                    width: `${rect.width}px`,\n                }}\n                onClick={(e) => e.stopPropagation()}\n            >\n                {children}\n            </div>\n        </>\n    );\n\n    return createPortal(portalContent, document.body);\n};\n\ninterface TypeSelectorDropdownProps {\n    options: FilterOption[];\n    onSelect: (type: FilterType) => void;\n    targetRef: React.RefObject<HTMLDivElement | null>;\n    isOpen: boolean;\n    onClose: () => void;\n}\n\nconst TypeSelectorDropdown: React.FC<TypeSelectorDropdownProps> = ({ options, onSelect, targetRef, isOpen, onClose }) => (\n    <DropdownPortal targetRef={targetRef} isOpen={isOpen} onClose={onClose}>\n        <div className={`flex flex-col gap-1 ${animationStyles.dropdownItem}`}>\n            {options.map((option) => (\n                <button\n                    key={option.type}\n                    onClick={() => onSelect(option.type)}\n                    className=\"w-full cursor-pointer p-1.5 text-xs rounded-md hover:bg-gray-50 text-right flex items-center justify-start gap-1.5 transition-colors duration-200\"\n                >\n                    <option.icon className=\"w-3.5 h-3.5\" />\n                    <span>{option.label}</span>\n                </button>\n            ))}\n        </div>\n    </DropdownPortal>\n);\n\ninterface ConditionDropdownProps {\n    conditions: FilterCondition[];\n    onSelect: (condition: FilterCondition) => void;\n    targetRef: React.RefObject<HTMLDivElement | null>;\n    isOpen: boolean;\n    onClose: () => void;\n}\n\nconst ConditionDropdown: React.FC<ConditionDropdownProps> = ({ conditions, onSelect, targetRef, isOpen, onClose }) => (\n    <DropdownPortal targetRef={targetRef} isOpen={isOpen} onClose={onClose}>\n        <div className={`flex flex-col gap-1 ${animationStyles.dropdownItem}`}>\n            {conditions.map((condition) => (\n                <button\n                    key={condition.id}\n                    onClick={() => onSelect(condition)}\n                    className=\"w-full cursor-pointer p-1.5 text-xs rounded-md hover:bg-gray-50 text-right transition-colors duration-200\"\n                >\n                    {condition.label}\n                </button>\n            ))}\n        </div>\n    </DropdownPortal>\n);\n\ninterface ValueSelectorProps {\n    onClick: (e: React.MouseEvent) => void;\n    targetRef: React.RefObject<HTMLDivElement | null>;\n}\n\nconst ValueSelector: React.FC<ValueSelectorProps> = ({ \n    onClick, \n    targetRef \n}) => (\n    <div \n        className={`${filterBlockStyles.filterItem} cursor-pointer text-gray-500 relative value-selector`}\n        onClick={onClick}\n        ref={targetRef}\n    >\n        <span>اختر القيمة</span>\n        <ChevronDown className=\"w-3 h-3 mr-1\" />\n    </div>\n);\n\ninterface ActiveFilterProps {\n    filter: FilterCriteria;\n    options: FilterOption[];\n    onRemove: () => void;\n    onTypeClick: (typeRef: React.RefObject<HTMLDivElement | null>) => void;\n    onConditionClick: (conditionRef: React.RefObject<HTMLDivElement | null>) => void;\n    onValueClick: (valueRef: React.RefObject<HTMLDivElement | null>) => void;\n    isBeingEdited?: boolean;\n}\n\nconst ActiveFilter: React.FC<ActiveFilterProps> = ({ \n    filter, \n    options, \n    onRemove, \n    onTypeClick,\n    onConditionClick,\n    onValueClick,\n    isBeingEdited = false\n}) => {\n    const option = options.find(opt => opt.type === filter.type);\n    const value = option?.values.find(v => v.id === filter.value);\n    const condition = option?.conditions.find(c => c.id === filter.condition);\n    const Icon = option?.icon;\n    \n    const typeRef = useRef<HTMLDivElement>(null);\n    const conditionRef = useRef<HTMLDivElement>(null);\n    const valueRef = useRef<HTMLDivElement>(null);\n\n    return (\n        <div className={filterBlockStyles.filterGroup}>\n            <div \n                ref={typeRef}\n                className={`${filterBlockStyles.filterItem} cursor-pointer`}\n                onClick={() => onTypeClick(typeRef)}\n            >\n                {Icon && <Icon className=\"w-3 h-3\" />}\n                <span>{option?.label}</span>\n            </div>\n            <div className={filterBlockStyles.separator} />\n            <div \n                ref={conditionRef}\n                className={`${filterBlockStyles.filterItem} cursor-pointer`}\n                onClick={() => onConditionClick(conditionRef)}\n            >\n                {condition?.label}\n            </div>\n            <div className={filterBlockStyles.separator} />\n            <div \n                ref={valueRef}\n                className={`${filterBlockStyles.filterItem} group cursor-pointer`} \n                onClick={() => onValueClick(valueRef)}\n            >\n                <span>{value?.label}</span>\n                {!isBeingEdited && (\n                    <button\n                        onClick={(e) => {\n                            e.stopPropagation();\n                            onRemove();\n                        }}\n                        className=\"cursor-pointer text-gray-400 hover:text-red-500 opacity-85 group-hover:opacity-100 transition-opacity mr-1\"\n                    >\n                        <X className=\"w-3 h-3\" />\n                    </button>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default function Filter({ options, onFilterChange, autoOpenDropdown = false, className = '' }: FilterProps) {\n    const {\n        isOpen,\n        setIsOpen,\n        activeFilters,\n        selectedType,\n        selectedCondition,\n        showConditions,\n        setShowConditions,\n        showValues,\n        setShowValues,\n        addFilterBtnRef,\n        conditionBtnRef,\n        valueSelectorRef,\n        handleValueClick,\n        handleValueSelect,\n        handleTypeSelect,\n        handleConditionSelect,\n        removeFilter,\n        editFilter,\n        editFilterCondition,\n        editFilterValue,\n        removeDraftFilter,\n        toggleFilterDropdown,\n        editMode,\n        setEditRef,\n        editRef,\n        draftFilter\n    } = useFilter({ autoOpenDropdown });\n\n    useEffect(() => {\n        onFilterChange?.(activeFilters);\n    }, [activeFilters, onFilterChange]);\n\n    const selectedOption = options.find(opt => opt.type === selectedType);\n    \n    // Check if a filter is being edited\n    const isEditingFilter = draftFilter?.originalIndex !== undefined;\n    // Check if we should show the add button - only show if there's at least one filter already\n    const showAddButton = !selectedType && !isEditingFilter && activeFilters.length > 0;\n\n    return (\n        <div className={`relative ${className}`}>\n            <div className={filterBlockStyles.container}>\n                {activeFilters.length === 0 && !selectedType && (\n                    <div \n                        ref={addFilterBtnRef}\n                        onClick={toggleFilterDropdown}\n                        className={filterBlockStyles.addFilterBtn}\n                    >\n                        <SlidersHorizontal className=\"w-3 h-3\" />\n                        <span>تصفية</span>\n                    </div>\n                )}\n\n                {/* Always display all active filters */}\n                {activeFilters.map((filter, index) => (\n                    <ActiveFilter \n                        key={filter.id ?? index}\n                        filter={filter} \n                        options={options}\n                        onRemove={() => removeFilter(index)}\n                        onTypeClick={(ref) => {\n                            setEditRef(ref);\n                            editFilter(filter, index);\n                        }}\n                        onConditionClick={(ref) => {\n                            setEditRef(ref);\n                            editFilterCondition(filter, index);\n                        }}\n                        onValueClick={(ref) => {\n                            setEditRef(ref);\n                            editFilterValue(filter, index);\n                        }}\n                        isBeingEdited={isEditingFilter && draftFilter?.originalIndex === index}\n                    />\n                ))}\n\n                {/* Only show the add button once at the end if we're not in edit mode */}\n                {showAddButton && (\n                    <div\n                        ref={addFilterBtnRef}\n                        onClick={toggleFilterDropdown}\n                        className={filterBlockStyles.addFilterBtn}\n                    >\n                        <Plus className=\"w-3 h-3\" />\n                    </div>\n                )}\n\n                {/* Only show this when creating a new filter (not when editing an existing one) */}\n                {selectedType && selectedOption && !isEditingFilter && (\n                    <div className={filterBlockStyles.filterGroup}>\n                        <FilterItem\n                            icon={selectedOption.icon}\n                            label={selectedOption.label}\n                            onRemove={removeDraftFilter}\n                        />\n\n                        {!selectedCondition && (\n                            <>\n                                <div className={filterBlockStyles.separator} />\n                                <div\n                                    ref={conditionBtnRef}\n                                    onClick={() => setShowConditions(true)}\n                                    className={`${filterBlockStyles.filterItem} cursor-pointer text-gray-500`}\n                                >\n                                    <span>اختر الشرط</span>\n                                    <ChevronDown className=\"w-3 h-3 mr-1\" />\n                                </div>\n                            </>\n                        )}\n\n                        {selectedCondition && (\n                            <>\n                                <div className={filterBlockStyles.separator} />\n                                <ConditionSelector\n                                    condition={selectedCondition}\n                                    onRemove={removeDraftFilter}\n                                />\n                                <div className={filterBlockStyles.separator} />\n                                <ValueSelector\n                                    onClick={handleValueClick}\n                                    targetRef={valueSelectorRef}\n                                />\n                            </>\n                        )}\n                    </div>\n                )}\n            </div>\n\n            <TypeSelectorDropdown \n                options={options}\n                onSelect={handleTypeSelect} \n                targetRef={editRef || addFilterBtnRef}\n                isOpen={isOpen && !selectedType}\n                onClose={() => setIsOpen(false)}\n            />\n\n            {selectedOption && (\n                <ConditionDropdown \n                    conditions={selectedOption.conditions}\n                    onSelect={handleConditionSelect}\n                    targetRef={editMode === 'condition' ? (editRef || conditionBtnRef) : conditionBtnRef}\n                    isOpen={showConditions}\n                    onClose={() => setShowConditions(false)}\n                />\n            )}\n\n            {selectedOption && selectedCondition && (\n                <DropdownPortal \n                    targetRef={editMode === 'value' ? (editRef || valueSelectorRef) : valueSelectorRef} \n                    isOpen={showValues} \n                    onClose={() => setShowValues(false)}\n                >\n                    <div className=\"flex flex-col gap-1 animate-slide-in\">\n                        {selectedOption.values.map((value) => (\n                            <div\n                                key={value.id}\n                                className={filterBlockStyles.valueDropdown}\n                                onClick={(e) => handleValueSelect(e, value.id, value.label)}\n                            >\n                                {value.label}\n                            </div>\n                        ))}\n                    </div>\n                </DropdownPortal>\n            )}\n        </div>\n    );\n}",
      "type": "registry:component"
    },
    {
      "path": "registry/default/filter/filter-builder.ts",
      "content": "export type FilterType = 'assignee' | 'history' | 'createdBy';\r\nexport type FilterCondition = 'is' | 'isNot';\r\n\r\nexport interface FilterCriteria {\r\n    id: string;\r\n    type: FilterType;\r\n    condition: FilterCondition;\r\n    value: string;\r\n}\r\n\r\nexport class FilterBuilder {\r\n    private filters: FilterCriteria[] = [];\r\n\r\n    private generateId() {\r\n        return `${Date.now().toString(36)}-${Math.random().toString(36).substring(2, 9)}`;\r\n    }\r\n\r\n    addFilter(type: FilterType, condition: FilterCondition, value: string): FilterBuilder {\r\n        this.filters.push({ id: this.generateId(), type, condition, value });\r\n        return this;\r\n    }\r\n\r\n    removeFilter(type: FilterType): FilterBuilder {\r\n        this.filters = this.filters.filter(filter => filter.type !== type);\r\n        return this;\r\n    }\r\n\r\n    clearFilters(): FilterBuilder {\r\n        this.filters = [];\r\n        return this;\r\n    }\r\n\r\n    getFilters(): FilterCriteria[] {\r\n        return [...this.filters];\r\n    }\r\n\r\n    buildQueryString(): string {\r\n        if (this.filters.length === 0) return '';\r\n\r\n        const params = this.filters.map(filter => {\r\n            const conditionParam = filter.condition === 'is' ? '' : 'not_';\r\n            return `${filter.type}=${conditionParam}${encodeURIComponent(filter.value)}`;\r\n        });\r\n\r\n        return `?${params.join('&')}`;\r\n    }\r\n} ",
      "type": "registry:lib"
    },
    {
      "path": "registry/default/filter/hooks/useFilter.ts",
      "content": "import { useState, useRef, useCallback } from 'react';\r\nimport { FilterType, FilterCondition, FilterCriteria, FilterStatus } from '@/registry/default/filter/lib/filter-types';\r\n\r\ninterface UseFilterOptions {\r\n    autoOpenDropdown?: boolean;\r\n}\r\n\r\ntype FilterState = {\r\n    isOpen: boolean;\r\n    activeFilters: FilterCriteria[];\r\n    draftFilter: {\r\n        type: FilterType | null;\r\n        condition: FilterCondition | null;\r\n        value?: string;\r\n        originalIndex?: number;\r\n    } | null;\r\n    showConditions: boolean;\r\n    showValues: boolean;\r\n    editMode: 'full' | 'condition' | 'value' | null;\r\n    editRef: React.RefObject<HTMLDivElement | null> | null;\r\n};\r\n\r\nexport function useFilter({ autoOpenDropdown = false }: UseFilterOptions = {}) {\r\n    const [state, setState] = useState<FilterState>({\r\n        isOpen: false,\r\n        activeFilters: [],\r\n        draftFilter: null,\r\n        showConditions: false,\r\n        showValues: false,\r\n        editMode: null,\r\n        editRef: null\r\n    });\r\n\r\n    const addFilterBtnRef = useRef<HTMLDivElement>(null);\r\n    const conditionBtnRef = useRef<HTMLDivElement>(null);\r\n    const valueSelectorRef = useRef<HTMLDivElement>(null);\r\n\r\n    const resetDraftFilter = useCallback(() => {\r\n        setState(prev => ({\r\n            ...prev,\r\n            draftFilter: null,\r\n            showConditions: false,\r\n            showValues: false,\r\n            isOpen: false,\r\n            editMode: null,\r\n            editRef: null\r\n        }));\r\n    }, []);\r\n\r\n    const handleValueClick = useCallback((e: React.MouseEvent) => {\r\n        e.stopPropagation();\r\n        setState(prev => ({\r\n            ...prev,\r\n            showValues: true,\r\n            showConditions: false,\r\n            isOpen: false\r\n        }));\r\n    }, []);\r\n\r\n    const generateId = () => `${Date.now().toString(36)}-${Math.random().toString(36).substring(2, 9)}`;\r\n\r\n    // Generic helper to update an existing filter in place\r\n    const updateExistingFilter = useCallback((prev: FilterState, index: number, data: Partial<Omit<FilterCriteria, 'id'>>) => {\r\n        const current = prev.activeFilters[index];\r\n        if (!current) return prev.activeFilters;\r\n        const updated: FilterCriteria = {\r\n            ...current,\r\n            ...data,\r\n            // Make sure we always have an id & completed status\r\n            id: current.id || generateId(),\r\n            status: 'completed' as FilterStatus\r\n        };\r\n        const next = [...prev.activeFilters];\r\n        next[index] = updated;\r\n        return next;\r\n    }, []);\r\n\r\n    // Centralised edit entry-point to cut duplication between the three public edit helpers\r\n    const startEdit = useCallback((filter: FilterCriteria, index: number, mode: 'full' | 'condition' | 'value') => {\r\n        setState(prev => {\r\n            const draft: NonNullable<FilterState['draftFilter']> = {\r\n                type: filter.type,\r\n                condition: (mode === 'value' || mode === 'full') ? { id: filter.condition, label: '' } : null,\r\n                value: mode === 'value' ? undefined : filter.value,\r\n                originalIndex: index\r\n            };\r\n\r\n            return {\r\n                ...prev,\r\n                draftFilter: draft,\r\n                showConditions: mode === 'condition',\r\n                showValues: mode === 'value',\r\n                isOpen: false,\r\n                editMode: mode\r\n            };\r\n        });\r\n    }, []);\r\n\r\n    const handleValueSelect = useCallback((e: React.MouseEvent, value: string, label: string) => {\r\n        e.stopPropagation();\r\n        \r\n        setState(prev => {\r\n            // Editing an existing filter\r\n            if (prev.draftFilter?.originalIndex !== undefined && prev.draftFilter?.type) {\r\n                const newActiveFilters = updateExistingFilter(prev, prev.draftFilter.originalIndex, {\r\n                    type: prev.draftFilter.type,\r\n                    condition: prev.draftFilter.condition?.id || '',\r\n                    value\r\n                });\r\n\r\n                return {\r\n                    ...prev,\r\n                    activeFilters: newActiveFilters,\r\n                    draftFilter: null,\r\n                    showValues: false,\r\n                    isOpen: false,\r\n                    editMode: null,\r\n                    editRef: null\r\n                };\r\n            }\r\n\r\n            // --- Creation flow\r\n            if (prev.draftFilter?.type && prev.draftFilter?.condition) {\r\n                const newFilter: FilterCriteria = {\r\n                    id: generateId(),\r\n                    type: prev.draftFilter.type,\r\n                    condition: prev.draftFilter.condition.id,\r\n                    value,\r\n                    status: 'completed' as FilterStatus\r\n                };\r\n\r\n                const nextState = {\r\n                    ...prev,\r\n                    activeFilters: [...prev.activeFilters, newFilter],\r\n                    draftFilter: null,\r\n                    showValues: false,\r\n                    isOpen: false,\r\n                    editMode: null,\r\n                    editRef: null\r\n                };\r\n\r\n                // If autoOpenDropdown is enabled, schedule the next dropdown to open\r\n                if (autoOpenDropdown) {\r\n                    setTimeout(() => {\r\n                        setState(s => ({\r\n                            ...s,\r\n                            isOpen: true\r\n                        }));\r\n                    }, 50);\r\n                }\r\n\r\n                return nextState;\r\n            }\r\n\r\n            return prev; // Fallback – nothing to change\r\n        });\r\n    }, [autoOpenDropdown, updateExistingFilter]);\r\n\r\n    const handleTypeSelect = useCallback((type: FilterType) => {\r\n        setState(prev => ({\r\n            ...prev,\r\n            draftFilter: { \r\n                type, \r\n                condition: null,\r\n                originalIndex: prev.draftFilter?.originalIndex \r\n            },\r\n            isOpen: false,\r\n            showConditions: true,\r\n            showValues: false,\r\n            editMode: prev.editMode\r\n        }));\r\n    }, []);\r\n\r\n    const handleConditionSelect = useCallback((condition: FilterCondition) => {\r\n        setState(prev => {\r\n            if (prev.editMode === 'condition' && prev.draftFilter?.originalIndex !== undefined && prev.draftFilter?.type) {\r\n                const newActiveFilters = updateExistingFilter(prev, prev.draftFilter.originalIndex, {\r\n                    type: prev.draftFilter.type,\r\n                    condition: condition.id,\r\n                    value: prev.draftFilter.value || ''\r\n                });\r\n\r\n                return {\r\n                    ...prev,\r\n                    activeFilters: newActiveFilters,\r\n                    draftFilter: null,\r\n                    showConditions: false,\r\n                    showValues: false,\r\n                    editMode: null,\r\n                    editRef: null\r\n                };\r\n            }\r\n\r\n            const nextState = {\r\n                ...prev,\r\n                draftFilter: prev.draftFilter ? {\r\n                    ...prev.draftFilter,\r\n                    condition\r\n                } : null,\r\n                showConditions: false,\r\n                showValues: true\r\n            };\r\n\r\n            // If autoOpenDropdown is enabled, schedule the next dropdown to open\r\n            if (autoOpenDropdown) {\r\n                setTimeout(() => {\r\n                    setState(s => ({\r\n                        ...s,\r\n                        isOpen: true\r\n                    }));\r\n                }, 50);\r\n            }\r\n\r\n            return nextState;\r\n        });\r\n    }, [autoOpenDropdown, updateExistingFilter]);\r\n\r\n    const removeFilter = useCallback((index: number) => {\r\n        setState(prev => ({\r\n            ...prev,\r\n            activeFilters: prev.activeFilters.filter((_, i) => i !== index)\r\n        }));\r\n    }, []);\r\n\r\n    const editFilter = useCallback((filter: FilterCriteria, index: number) => startEdit(filter, index, 'full'), [startEdit]);\r\n\r\n    const editFilterCondition = useCallback((filter: FilterCriteria, index: number) => startEdit(filter, index, 'condition'), [startEdit]);\r\n\r\n    const editFilterValue = useCallback((filter: FilterCriteria, index: number) => startEdit(filter, index, 'value'), [startEdit]);\r\n\r\n    const removeDraftFilter = useCallback(() => {\r\n        resetDraftFilter();\r\n    }, [resetDraftFilter]);\r\n\r\n    const toggleFilterDropdown = useCallback(() => {\r\n        setState(prev => ({\r\n            ...prev,\r\n            isOpen: !prev.isOpen,\r\n            draftFilter: prev.isOpen ? null : prev.draftFilter\r\n        }));\r\n    }, []);\r\n    \r\n    const setEditRef = useCallback((ref: React.RefObject<HTMLDivElement | null>) => {\r\n        setState(prev => ({\r\n            ...prev,\r\n            editRef: ref\r\n        }));\r\n    }, []);\r\n\r\n    return {\r\n        isOpen: state.isOpen,\r\n        setIsOpen: (isOpen: boolean) => setState(prev => ({ ...prev, isOpen })),\r\n        activeFilters: state.activeFilters,\r\n        selectedType: state.draftFilter?.type ?? null,\r\n        selectedCondition: state.draftFilter?.condition ?? null,\r\n        showConditions: state.showConditions,\r\n        setShowConditions: (show: boolean) => setState(prev => ({ ...prev, showConditions: show })),\r\n        showValues: state.showValues,\r\n        setShowValues: (show: boolean) => setState(prev => ({ ...prev, showValues: show })),\r\n        addFilterBtnRef,\r\n        conditionBtnRef,\r\n        valueSelectorRef,\r\n        handleValueClick,\r\n        handleValueSelect,\r\n        handleTypeSelect,\r\n        handleConditionSelect,\r\n        removeFilter,\r\n        editFilter,\r\n        editFilterCondition,\r\n        editFilterValue,\r\n        removeDraftFilter,\r\n        toggleFilterDropdown,\r\n        editMode: state.editMode,\r\n        setEditRef,\r\n        editRef: state.editRef,\r\n        draftFilter: state.draftFilter\r\n    };\r\n} ",
      "type": "registry:hook"
    },
    {
      "path": "registry/default/filter/lib/filter-types.ts",
      "content": "import { LucideIcon } from \"lucide-react\";\r\n\r\nexport type FilterType = string;\r\n\r\nexport interface FilterCondition {\r\n    id: string;\r\n    label: string;\r\n}\r\n\r\nexport interface FilterOption {\r\n    type: FilterType;\r\n    label: string;\r\n    icon: LucideIcon;\r\n    values: { id: string; label: string }[];\r\n    conditions: FilterCondition[];\r\n}\r\n\r\nexport type FilterStatus = 'draft' | 'inProgress' | 'completed';\r\n\r\nexport interface FilterCriteria {\r\n    id: string;\r\n    type: FilterType;\r\n    condition: string;\r\n    value: string;\r\n    status?: FilterStatus;\r\n}\r\n\r\nexport interface FilterProps {\r\n    options: FilterOption[];\r\n    onFilterChange?: (filters: FilterCriteria[]) => void;\r\n    autoOpenDropdown?: boolean;\r\n    className?: string;\r\n} ",
      "type": "registry:lib"
    },
    {
      "path": "registry/default/filter/lib/filter-styles.ts",
      "content": "export const filterBlockStyles = {\r\n    container: \"flex items-center gap-2 flex-wrap\",\r\n    filterGroup: \"flex items-center bg-white border border-gray-300 rounded-lg overflow-hidden\",\r\n    filterItem: \"py-1 px-2 flex items-center gap-1 text-xs overflow-visible transition-all duration-200\",\r\n    separator: \"w-[1px] h-4 bg-gray-300\",\r\n    addFilterBtn: \"bg-gray-200/10 border-1 border-dashed border-gray-400 rounded-lg py-1 px-2 flex items-center gap-2 text-gray-500 text-xs w-fit cursor-pointer hover:bg-gray-100/50 transition-colors duration-200\",\r\n    dropdownBtn: \"bg-gray-200/10 border-1 border-dashed border-gray-400 rounded-lg py-1 px-2 flex items-center gap-1 text-gray-500 text-xs cursor-pointer hover:bg-gray-100/50 transition-colors duration-200\",\r\n    valueInput: \"py-1 px-2 text-xs w-24 focus:outline-none\",\r\n    applyBtn: \"bg-blue-500 text-white py-1 px-2 text-xs\",\r\n    valueDropdown: \"py-1.5 px-2 text-xs cursor-pointer hover:bg-gray-50 text-right transition-colors duration-200\",\r\n    dropdownContainer: \"fixed bg-white rounded-lg shadow-lg border border-gray-200 py-1 w-full min-w-[160px] z-[9999] animate-fade-in\",\r\n}; ",
      "type": "registry:lib"
    }
  ]
}